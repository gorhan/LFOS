scope({c0_algorithm:11, c0_centering:2, c0_earliness:2, c0_lateness:2, c0_makespan:2, c0_maxi:3, c0_mini:3, c0_name:11, c0_objective_purpose:3, c0_power_consumption:2, c0_resource_related_objective_criteria:2, c0_resource_related_user_defined_criteria:3, c0_tardiness:2, c0_task_related_user_defined_criteria:3, c0_throughput:2, c0_time_related_objective_criteria:2, c0_user_defined_objective_criteria:3, c0_utilization:2});
defaultScope(1);
intRange(-8, 7);
stringLength(35);

c0_objective_purpose = Abstract("c0_objective_purpose").withGroupCard(1, 1);
c0_maxi = c0_objective_purpose.addChild("c0_maxi").withCard(0, 1);
c0_mini = c0_objective_purpose.addChild("c0_mini").withCard(0, 1);
c0_time_related_objective_criteria = Abstract("c0_time_related_objective_criteria").withGroupCard(1);
c0_makespan = c0_time_related_objective_criteria.addChild("c0_makespan").withCard(0, 1);
c0_tardiness = c0_time_related_objective_criteria.addChild("c0_tardiness").withCard(0, 1);
c0_earliness = c0_time_related_objective_criteria.addChild("c0_earliness").withCard(0, 1);
c0_lateness = c0_time_related_objective_criteria.addChild("c0_lateness").withCard(0, 1);
c0_centering = c0_time_related_objective_criteria.addChild("c0_centering").withCard(0, 1);
c0_resource_related_objective_criteria = Abstract("c0_resource_related_objective_criteria").withGroupCard(1);
c0_power_consumption = c0_resource_related_objective_criteria.addChild("c0_power_consumption").withCard(0, 1);
c0_utilization = c0_resource_related_objective_criteria.addChild("c0_utilization").withCard(0, 1);
c0_throughput = c0_resource_related_objective_criteria.addChild("c0_throughput").withCard(0, 1);
c0_user_defined_objective_criteria = Abstract("c0_user_defined_objective_criteria").withGroupCard(1);
c0_task_related_user_defined_criteria = c0_user_defined_objective_criteria.addChild("c0_task_related_user_defined_criteria").withCard(0, 1);
c0_resource_related_user_defined_criteria = c0_user_defined_objective_criteria.addChild("c0_resource_related_user_defined_criteria").withCard(0, 1);
c0_task_related_objective = Abstract("c0_task_related_objective");
c0_purpose = c0_task_related_objective.addChild("c0_purpose").withCard(1, 1).withGroupCard(1, 1);
c0_criteria = c0_task_related_objective.addChild("c0_criteria").withCard(1, 1).withGroupCard(1);
c1_time_related_objective_criteria = c0_criteria.addChild("c1_time_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c1_user_defined_objective_criteria = c0_criteria.addChild("c1_user_defined_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_resource_related_objective = Abstract("c0_resource_related_objective");
c1_purpose = c0_resource_related_objective.addChild("c1_purpose").withCard(1, 1).withGroupCard(1, 1);
c1_criteria = c0_resource_related_objective.addChild("c1_criteria").withCard(1, 1).withGroupCard(1);
c1_resource_related_objective_criteria = c1_criteria.addChild("c1_resource_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c2_user_defined_objective_criteria = c1_criteria.addChild("c2_user_defined_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_global_objective = Abstract("c0_global_objective");
c2_purpose = c0_global_objective.addChild("c2_purpose").withCard(1, 1).withGroupCard(1, 1);
c2_criteria = c0_global_objective.addChild("c2_criteria").withCard(1, 1).withGroupCard(1);
c2_time_related_objective_criteria = c2_criteria.addChild("c2_time_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c2_resource_related_objective_criteria = c2_criteria.addChild("c2_resource_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c3_user_defined_objective_criteria = c2_criteria.addChild("c3_user_defined_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_resource = Abstract("c0_resource");
c0_granularity = c0_resource.addChild("c0_granularity").withCard(1, 1).withGroupCard(1, 1);
c0_composite = c0_granularity.addChild("c0_composite").withCard(0, 1);
c0_actual = c0_granularity.addChild("c0_actual").withCard(0, 1);
c0_type = c0_resource.addChild("c0_type").withCard(1, 1).withGroupCard(1, 1);
c0_active = c0_type.addChild("c0_active").withCard(0, 1);
c0_passive = c0_type.addChild("c0_passive").withCard(0, 1);
c1_composite = c0_type.addChild("c1_composite").withCard(0, 1);
c0_dedicated = c0_resource.addChild("c0_dedicated").withCard(0, 1);
c0_capacity = c0_resource.addChild("c0_capacity").withCard(1, 1);
c0_mutual_exclusion = c0_resource.addChild("c0_mutual_exclusion").withCard(0, 1);
c0_self = c0_mutual_exclusion.addChild("c0_self").withCard(0, 1);
c1_power_consumption = c0_resource.addChild("c1_power_consumption").withCard(1, 1);
c0_scalable = c1_power_consumption.addChild("c0_scalable").withCard(0, 1).withGroupCard(1, 1);
c0_discrete = c0_scalable.addChild("c0_discrete").withCard(0, 1);
c0_continuous = c0_scalable.addChild("c0_continuous").withCard(0, 1);
c0_objective = c0_resource.addChild("c0_objective").withCard(0, 1);
c0_timing = Abstract("c0_timing");
c0_release_time = c0_timing.addChild("c0_release_time").withCard(1, 1);
c0_execution_time = c0_timing.addChild("c0_execution_time").withCard(1, 1);
c0_deadline = c0_timing.addChild("c0_deadline").withCard(0, 1);
c0_periodicity = c0_timing.addChild("c0_periodicity").withCard(1, 1).withGroupCard(1, 1);
c0_periodic = c0_periodicity.addChild("c0_periodic").withCard(0, 1);
c0_aperiodic = c0_periodicity.addChild("c0_aperiodic").withCard(0, 1);
c0_sporadic = c0_aperiodic.addChild("c0_sporadic").withCard(0, 1);
c0_requirement = Abstract("c0_requirement");
c1_deadline = c0_requirement.addChild("c1_deadline").withCard(1, 1).withGroupCard(1, 1);
c0_hard = c1_deadline.addChild("c0_hard").withCard(0, 1);
c0_soft = c1_deadline.addChild("c0_soft").withCard(0, 1);
c0_firm = c1_deadline.addChild("c0_firm").withCard(0, 1);
c0_required_resource = c0_requirement.addChild("c0_required_resource").withCard(1);
c0_task = Abstract("c0_task");
c1_granularity = c0_task.addChild("c1_granularity").withCard(1, 1).withGroupCard(1, 1);
c2_composite = c1_granularity.addChild("c2_composite").withCard(0, 1);
c1_actual = c1_granularity.addChild("c1_actual").withCard(0, 1);
c1_timing = c0_task.addChild("c1_timing").withCard(1, 1);
c1_objective = c0_task.addChild("c1_objective").withCard(0, 1);
c0_dependency = c0_task.addChild("c0_dependency").withCard(0, 1);
c0_data_dependency = c0_dependency.addChild("c0_data_dependency").withCard(1, 1);
c0_task_dependency = c0_dependency.addChild("c0_task_dependency").withCard(1, 1);
c0_interval = c0_dependency.addChild("c0_interval").withCard(0, 1);
c0_preemptable = c0_task.addChild("c0_preemptable").withCard(0, 1);
c0_partial = c0_preemptable.addChild("c0_partial").withCard(0, 1);
c1_requirement = c0_task.addChild("c1_requirement").withCard(1, 1);
c0_priority = c0_task.addChild("c0_priority").withCard(1, 1);
c0_scheduling_policy = Abstract("c0_scheduling_policy");
c0_grouping = c0_scheduling_policy.addChild("c0_grouping").withCard(0, 1);
c0_ranking = c0_scheduling_policy.addChild("c0_ranking").withCard(1, 1).withGroupCard(1, 1);
c0_user_defined = c0_ranking.addChild("c0_user_defined").withCard(0, 1);
c0_integrated = c0_ranking.addChild("c0_integrated").withCard(0, 1).withGroupCard(1, 1);
c0_ERT = c0_integrated.addChild("c0_ERT").withCard(0, 1);
c0_ED = c0_integrated.addChild("c0_ED").withCard(0, 1);
c0_RM = c0_integrated.addChild("c0_RM").withCard(0, 1);
c0_SJF = c0_integrated.addChild("c0_SJF").withCard(0, 1);
c0_FIFO = c0_integrated.addChild("c0_FIFO").withCard(0, 1);
c0_scheduling_characteristic = Abstract("c0_scheduling_characteristic");
c1_type = c0_scheduling_characteristic.addChild("c1_type").withCard(1, 1).withGroupCard(1, 1);
c0_online = c1_type.addChild("c0_online").withCard(0, 1);
c0_offline = c1_type.addChild("c0_offline").withCard(0, 1);
c0_task_filtering = c0_scheduling_characteristic.addChild("c0_task_filtering").withCard(0, 1);
c0_policy = c0_scheduling_characteristic.addChild("c0_policy").withCard(1, 1);
c0_preemption = c0_scheduling_characteristic.addChild("c0_preemption").withCard(0, 1);
c0_priority_assignment = c0_scheduling_characteristic.addChild("c0_priority_assignment").withCard(1, 1).withGroupCard(1, 1);
c0_fixed = c0_priority_assignment.addChild("c0_fixed").withCard(0, 1);
c0_dynamic = c0_priority_assignment.addChild("c0_dynamic").withCard(0, 1);
c0_migration = c0_scheduling_characteristic.addChild("c0_migration").withCard(0, 1).withGroupCard(1, 1);
c0_task_level = c0_migration.addChild("c0_task_level").withCard(0, 1);
c0_job_level = c0_migration.addChild("c0_job_level").withCard(0, 1);
c0_scheduling_window = c0_scheduling_characteristic.addChild("c0_scheduling_window").withCard(1, 1).withGroupCard(1, 1);
c1_fixed = c0_scheduling_window.addChild("c1_fixed").withCard(0, 1);
c1_dynamic = c0_scheduling_window.addChild("c1_dynamic").withCard(0, 1);
c0_time_resolution = c0_scheduling_characteristic.addChild("c0_time_resolution").withCard(1, 1);
c2_objective = c0_scheduling_characteristic.addChild("c2_objective").withCard(1);
c0_algorithm = Abstract("c0_algorithm");
c0_name = c0_algorithm.addChild("c0_name").withCard(1, 1);
c0_scheduling_algorithm = Abstract("c0_scheduling_algorithm").withGroupCard(1, 1);
c0_CP = c0_scheduling_algorithm.addChild("c0_CP").withCard(0, 1);
c0_CIP = c0_scheduling_algorithm.addChild("c0_CIP").withCard(0, 1);
c0_MILP = c0_scheduling_algorithm.addChild("c0_MILP").withCard(0, 1);
c0_LBBD = c0_scheduling_algorithm.addChild("c0_LBBD").withCard(0, 1);
c0_GA = c0_scheduling_algorithm.addChild("c0_GA").withCard(0, 1);
c0_KS = c0_scheduling_algorithm.addChild("c0_KS").withCard(0, 1);
c0_WIS = c0_scheduling_algorithm.addChild("c0_WIS").withCard(0, 1);
c0_SA = c0_scheduling_algorithm.addChild("c0_SA").withCard(0, 1);
c0_B_BS = c0_scheduling_algorithm.addChild("c0_B_BS").withCard(0, 1);
c0_HA = c0_scheduling_algorithm.addChild("c0_HA").withCard(0, 1);
c0_KBS = c0_scheduling_algorithm.addChild("c0_KBS").withCard(0, 1);
c0_scheduling_solver = Abstract("c0_scheduling_solver").withGroupCard(1);
c0_IBM_ILOG_CPLEX = c0_scheduling_solver.addChild("c0_IBM_ILOG_CPLEX").withCard(0, 1);
c0_IBM_ILOG_CP_Optimizer = c0_scheduling_solver.addChild("c0_IBM_ILOG_CP_Optimizer").withCard(0, 1);
c0_SCIP_SoPlex = c0_scheduling_solver.addChild("c0_SCIP_SoPlex").withCard(0, 1);
c0_GA_solver = c0_scheduling_solver.addChild("c0_GA_solver").withCard(0, 1);
c0_KS_solver = c0_scheduling_solver.addChild("c0_KS_solver").withCard(0, 1);
c0_WIS_solver = c0_scheduling_solver.addChild("c0_WIS_solver").withCard(0, 1);
c0_SA_solver = c0_scheduling_solver.addChild("c0_SA_solver").withCard(0, 1);
c0_B_BS_solver = c0_scheduling_solver.addChild("c0_B_BS_solver").withCard(0, 1);
c0_HA_solver = c0_scheduling_solver.addChild("c0_HA_solver").withCard(0, 1);
c0_KBS_solver = c0_scheduling_solver.addChild("c0_KBS_solver").withCard(0, 1);
c0_scheduling_adapter = Abstract("c0_scheduling_adapter").withGroupCard(1);
c0_IBM_ILOG_CPLEX_adapter = c0_scheduling_adapter.addChild("c0_IBM_ILOG_CPLEX_adapter").withCard(0, 1);
c0_IBM_ILOG_CP_Optimizer_adapter = c0_scheduling_adapter.addChild("c0_IBM_ILOG_CP_Optimizer_adapter").withCard(0, 1);
c0_SCIP_SoPlex_adapter = c0_scheduling_adapter.addChild("c0_SCIP_SoPlex_adapter").withCard(0, 1);
c0_GA_adapter = c0_scheduling_adapter.addChild("c0_GA_adapter").withCard(0, 1);
c0_KS_adapter = c0_scheduling_adapter.addChild("c0_KS_adapter").withCard(0, 1);
c0_WIS_adapter = c0_scheduling_adapter.addChild("c0_WIS_adapter").withCard(0, 1);
c0_SA_adapter = c0_scheduling_adapter.addChild("c0_SA_adapter").withCard(0, 1);
c0_B_BS_adapter = c0_scheduling_adapter.addChild("c0_B_BS_adapter").withCard(0, 1);
c0_HA_adapter = c0_scheduling_adapter.addChild("c0_HA_adapter").withCard(0, 1);
c0_KBS_adapter = c0_scheduling_adapter.addChild("c0_KBS_adapter").withCard(0, 1);
c0_scheduler = Abstract("c0_scheduler");
c0_taskset = c0_scheduler.addChild("c0_taskset").withCard(1);
c0_system = c0_scheduler.addChild("c0_system").withCard(1);
c0_properties = c0_scheduler.addChild("c0_properties").withCard(1, 1);
c1_algorithm = c0_scheduler.addChild("c1_algorithm").withCard(1, 1).withGroupCard(1, 1);
c0_solver = c0_scheduler.addChild("c0_solver").withCard(1, 1).withGroupCard(1);
c0_adapter = c0_scheduler.addChild("c0_adapter").withCard(1, 1).withGroupCard(1);
c0_r1 = Clafer("c0_r1").withCard(1, 1);
c0_t1 = Clafer("c0_t1").withCard(1, 1);
c0_objective_gl = Clafer("c0_objective_gl").withCard(1, 1);
c0_sched = Clafer("c0_sched").withCard(1, 1);
c0_purpose.extending(c0_objective_purpose);
c1_time_related_objective_criteria.extending(c0_time_related_objective_criteria);
c1_user_defined_objective_criteria.extending(c0_user_defined_objective_criteria);
c1_user_defined_objective_criteria.addConstraint(and(some(join($this(), c0_task_related_user_defined_criteria)), none(join($this(), c0_resource_related_user_defined_criteria))));
c1_purpose.extending(c0_objective_purpose);
c1_resource_related_objective_criteria.extending(c0_resource_related_objective_criteria);
c2_user_defined_objective_criteria.extending(c0_user_defined_objective_criteria);
c2_user_defined_objective_criteria.addConstraint(and(none(join($this(), c0_task_related_user_defined_criteria)), some(join($this(), c0_resource_related_user_defined_criteria))));
c2_purpose.extending(c0_objective_purpose);
c2_time_related_objective_criteria.extending(c0_time_related_objective_criteria);
c2_resource_related_objective_criteria.extending(c0_resource_related_objective_criteria);
c3_user_defined_objective_criteria.extending(c0_user_defined_objective_criteria);
c0_type.addConstraint(implies(or(some(join($this(), c0_active)), some(join($this(), c0_passive))), some(join(join(joinParent($this()), c0_granularity), c0_actual))));
c1_power_consumption.addConstraint(implies(some(join($this(), c0_scalable)), some(join(join(joinParent($this()), c0_type), c0_active))));
c0_objective.extending(c0_resource_related_objective);
c0_required_resource.refToUnique(c0_resource);
c0_required_resource.addConstraint(some([decl([r = local("r")], global(c0_resource))], some(join(join(r, c0_type), c0_active))));
c1_timing.extending(c0_timing);
c1_objective.extending(c0_task_related_objective);
c0_dependency.addConstraint(xor(some(join($this(), c0_data_dependency)), some(join($this(), c0_task_dependency))));
c1_requirement.extending(c0_requirement);
c0_task.addConstraint(implies(some(join(join(join($this(), c1_requirement), c1_deadline), c0_hard)), some(join(join($this(), c1_timing), c0_deadline))));
c0_policy.extending(c0_scheduling_policy);
c2_objective.refToUnique(c0_global_objective);
c0_name.refTo(string);
c0_CP.extending(c0_algorithm);
c0_CP.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Constraint Programming\"")));
c0_CIP.extending(c0_algorithm);
c0_CIP.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Constraint Integer Programming\"")));
c0_MILP.extending(c0_algorithm);
c0_MILP.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Mixed Integer Linear Programming\"")));
c0_LBBD.extending(c0_algorithm);
c0_LBBD.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Logic-Based Benders Decomposition\"")));
c0_GA.extending(c0_algorithm);
c0_GA.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Genetic Algorithm\"")));
c0_KS.extending(c0_algorithm);
c0_KS.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Knapsack Algorithm\"")));
c0_WIS.extending(c0_algorithm);
c0_WIS.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Weighted Interval Scheduling\"")));
c0_SA.extending(c0_algorithm);
c0_SA.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Simulate Annealing\"")));
c0_B_BS.extending(c0_algorithm);
c0_B_BS.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Branch & Bound Scheduling\"")));
c0_HA.extending(c0_algorithm);
c0_HA.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Heuristic Algorithm\"")));
c0_KBS.extending(c0_algorithm);
c0_KBS.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Knowledge-Based Scheduling\"")));
c0_taskset.refToUnique(c0_task);
c0_system.refToUnique(c0_resource);
c0_properties.extending(c0_scheduling_characteristic);
c1_algorithm.extending(c0_scheduling_algorithm);
c0_solver.extending(c0_scheduling_solver);
c0_adapter.extending(c0_scheduling_adapter);
c0_scheduler.addConstraint(and(and(and(and(and(and(ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_GA)), some(join(join($this(), c0_solver), c0_GA_solver))), some(join(join($this(), c0_adapter), c0_GA_adapter))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_KS)), some(join(join($this(), c0_solver), c0_KS_solver))), some(join(join($this(), c0_adapter), c0_KS_adapter)))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_WIS)), some(join(join($this(), c0_solver), c0_WIS_solver))), some(join(join($this(), c0_adapter), c0_WIS_adapter)))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_SA)), some(join(join($this(), c0_solver), c0_SA_solver))), some(join(join($this(), c0_adapter), c0_SA_adapter)))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_B_BS)), some(join(join($this(), c0_solver), c0_B_BS_solver))), some(join(join($this(), c0_adapter), c0_B_BS_adapter)))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_HA)), some(join(join($this(), c0_solver), c0_HA_solver))), some(join(join($this(), c0_adapter), c0_HA_adapter)))), ifOnlyIf(ifOnlyIf(some(join(join($this(), c1_algorithm), c0_KBS)), some(join(join($this(), c0_solver), c0_KBS_solver))), some(join(join($this(), c0_adapter), c0_KBS_adapter)))));
c0_scheduler.addConstraint(implies(some(join(join($this(), c1_algorithm), c0_MILP)), and(some(join(join($this(), c0_solver), c0_IBM_ILOG_CPLEX)), some(join(join($this(), c0_adapter), c0_IBM_ILOG_CPLEX_adapter)))));
c0_scheduler.addConstraint(implies(some(join(join($this(), c1_algorithm), c0_LBBD)), and(and(and(some(join(join($this(), c0_solver), c0_SCIP_SoPlex)), some(join(join($this(), c0_solver), c0_IBM_ILOG_CP_Optimizer))), some(join(join($this(), c0_adapter), c0_SCIP_SoPlex_adapter))), some(join(join($this(), c0_adapter), c0_IBM_ILOG_CP_Optimizer_adapter)))));
c0_scheduler.addConstraint(implies(some(join(join($this(), c1_algorithm), c0_CIP)), and(some(join(join($this(), c0_solver), c0_SCIP_SoPlex)), some(join(join($this(), c0_adapter), c0_SCIP_SoPlex_adapter)))));
c0_r1.extending(c0_resource);
Constraint(and(and(and(some(join(join(global(c0_resource), c1_power_consumption), c0_scalable)), none(join(global(c0_resource), c0_dedicated))), none(join(global(c0_resource), c0_mutual_exclusion))), none(join(join(join(global(c0_r1), c0_objective), c1_criteria), c2_user_defined_objective_criteria))));
c0_t1.extending(c0_task);
Constraint(and(and(and(and(equal(joinRef(join(join(global(c0_t1), c1_requirement), c0_required_resource)), global(c0_r1)), none(join(global(c0_t1), c1_objective))), some(join(join(join(global(c0_t1), c1_timing), c0_periodicity), c0_periodic))), some(join(join(global(c0_t1), c1_granularity), c1_actual))), none(join(global(c0_t1), c0_preemptable))));
Constraint(none(join(global(c0_r1), c0_objective)));
c0_objective_gl.extending(c0_global_objective);
Constraint(some(join(join(join(global(c0_objective_gl), c2_criteria), c2_time_related_objective_criteria), c0_tardiness)));
c0_sched.extending(c0_scheduler);
Constraint(equal(joinRef(join(global(c0_sched), c0_taskset)), global(c0_t1)));
Constraint(equal(joinRef(join(global(c0_sched), c0_system)), global(c0_r1)));
Constraint(equal(joinRef(join(join(global(c0_sched), c0_properties), c2_objective)), global(c0_objective_gl)));
Constraint(some(join(join(global(c0_sched), c1_algorithm), c0_LBBD)));
