scope({c0_Active:2, c0_Actual:2, c0_Aperiodic:3, c0_Capacity:2, c0_Composite:2, c0_Continuous:2, c0_Data:3, c0_Deadline:3, c0_Dedicated:2, c0_Dependency:3, c0_DependentTo:3, c0_Discrete:2, c0_Dynamic:3, c0_ExecutionTime:3, c0_Firm:3, c0_Fixed:3, c0_Granularity:2, c0_Hard:3, c0_Interval:3, c0_Job:3, c0_MutualExclusion:2, c0_Objective:2, c0_Partial:3, c0_Passive:2, c0_Periodic:3, c0_Periodicity:3, c0_PowerConsumption:2, c0_Preemptable:3, c0_Priority:3, c0_ReleaseTime:3, c0_Requirement:3, c0_Resource:2, c0_SELF:2, c0_Scalable:2, c0_Soft:3, c0_Source:3, c0_Sporadic:3, c0_Task:3, c0_Timing:3, c0_Type:2, c0_requirement:3, c0_system:2, c0_taskset:3, c0_timing:3, c0_which:6, c1_Actual:3, c1_Composite:3, c1_Deadline:3, c1_Granularity:3, c1_Objective:3});
defaultScope(1);
intRange(-8, 7);
stringLength(16);

c0_Resource = Abstract("c0_Resource");
c0_Granularity = c0_Resource.addChild("c0_Granularity").withCard(1, 1).withGroupCard(1, 1);
c0_Composite = c0_Granularity.addChild("c0_Composite").withCard(0, 1);
c0_Actual = c0_Granularity.addChild("c0_Actual").withCard(0, 1);
c0_Type = c0_Resource.addChild("c0_Type").withCard(1, 1).withGroupCard(1, 1);
c0_Active = c0_Type.addChild("c0_Active").withCard(0, 1);
c0_Passive = c0_Type.addChild("c0_Passive").withCard(0, 1);
c0_Dedicated = c0_Resource.addChild("c0_Dedicated").withCard(0, 1);
c0_Capacity = c0_Resource.addChild("c0_Capacity").withCard(1, 1);
c0_MutualExclusion = c0_Resource.addChild("c0_MutualExclusion").withCard(0, 1);
c0_SELF = c0_MutualExclusion.addChild("c0_SELF").withCard(0, 1);
c0_PowerConsumption = c0_Resource.addChild("c0_PowerConsumption").withCard(1, 1);
c0_Scalable = c0_PowerConsumption.addChild("c0_Scalable").withCard(0, 1).withGroupCard(1, 1);
c0_Discrete = c0_Scalable.addChild("c0_Discrete").withCard(0, 1);
c0_Continuous = c0_Scalable.addChild("c0_Continuous").withCard(0, 1);
c0_Objective = c0_Resource.addChild("c0_Objective").withCard(0, 1);
c0_Timing = Abstract("c0_Timing");
c0_ReleaseTime = c0_Timing.addChild("c0_ReleaseTime").withCard(1, 1);
c0_ExecutionTime = c0_Timing.addChild("c0_ExecutionTime").withCard(1, 1);
c0_Deadline = c0_Timing.addChild("c0_Deadline").withCard(0, 1);
c0_Periodicity = c0_Timing.addChild("c0_Periodicity").withCard(1, 1).withGroupCard(1, 1);
c0_Periodic = c0_Periodicity.addChild("c0_Periodic").withCard(0, 1);
c0_Aperiodic = c0_Periodicity.addChild("c0_Aperiodic").withCard(0, 1);
c0_Sporadic = c0_Aperiodic.addChild("c0_Sporadic").withCard(0, 1);
c0_Requirement = Abstract("c0_Requirement");
c1_Deadline = c0_Requirement.addChild("c1_Deadline").withCard(1, 1).withGroupCard(1, 1);
c0_Hard = c1_Deadline.addChild("c0_Hard").withCard(0, 1);
c0_Soft = c1_Deadline.addChild("c0_Soft").withCard(0, 1);
c0_Firm = c1_Deadline.addChild("c0_Firm").withCard(0, 1);
c0_Source = c0_Requirement.addChild("c0_Source").withCard(1, 1);
c0_which = c0_Source.addChild("c0_which").withCard(1);
c0_Task = Abstract("c0_Task");
c1_Granularity = c0_Task.addChild("c1_Granularity").withCard(1, 1).withGroupCard(1, 1);
c1_Composite = c1_Granularity.addChild("c1_Composite").withCard(0, 1);
c1_Actual = c1_Granularity.addChild("c1_Actual").withCard(0, 1);
c0_timing = c0_Task.addChild("c0_timing").withCard(1, 1);
c1_Objective = c0_Task.addChild("c1_Objective").withCard(0, 1);
c0_Dependency = c0_Task.addChild("c0_Dependency").withCard(0, 1);
c0_DependentTo = c0_Dependency.addChild("c0_DependentTo").withCard(1, 1).withGroupCard(1);
c0_Job = c0_DependentTo.addChild("c0_Job").withCard(0, 1);
c0_Data = c0_DependentTo.addChild("c0_Data").withCard(0, 1);
c0_Interval = c0_Dependency.addChild("c0_Interval").withCard(0, 1);
c0_Preemptable = c0_Task.addChild("c0_Preemptable").withCard(0, 1);
c0_Partial = c0_Preemptable.addChild("c0_Partial").withCard(0, 1);
c0_requirement = c0_Task.addChild("c0_requirement").withCard(1, 1);
c0_Priority = c0_Task.addChild("c0_Priority").withCard(1, 1).withGroupCard(1, 1);
c0_Fixed = c0_Priority.addChild("c0_Fixed").withCard(0, 1);
c0_Dynamic = c0_Priority.addChild("c0_Dynamic").withCard(0, 1);
c0_Algorithm = Abstract("c0_Algorithm");
c1_Type = c0_Algorithm.addChild("c1_Type").withCard(1, 1).withGroupCard(1, 1);
c0_Online = c1_Type.addChild("c0_Online").withCard(0, 1);
c0_Offline = c1_Type.addChild("c0_Offline").withCard(0, 1);
c0_Policy = c0_Algorithm.addChild("c0_Policy").withCard(1, 1);
c0_Grouping = c0_Policy.addChild("c0_Grouping").withCard(0, 1);
c0_Ranking = c0_Policy.addChild("c0_Ranking").withCard(1, 1).withGroupCard(1, 1);
c0_Integrated = c0_Ranking.addChild("c0_Integrated").withCard(0, 1).withGroupCard(1, 1);
c0_ERT = c0_Integrated.addChild("c0_ERT").withCard(0, 1);
c0_ED = c0_Integrated.addChild("c0_ED").withCard(0, 1);
c0_RM = c0_Integrated.addChild("c0_RM").withCard(0, 1);
c0_SJF = c0_Integrated.addChild("c0_SJF").withCard(0, 1);
c0_FIFO = c0_Integrated.addChild("c0_FIFO").withCard(0, 1);
c0_UserDefined = c0_Ranking.addChild("c0_UserDefined").withCard(0, 1);
c0_Preemption = c0_Algorithm.addChild("c0_Preemption").withCard(0, 1);
c0_Migration = c0_Algorithm.addChild("c0_Migration").withCard(0, 1).withGroupCard(1, 1);
c0_TaskLevel = c0_Migration.addChild("c0_TaskLevel").withCard(0, 1);
c0_JobLevel = c0_Migration.addChild("c0_JobLevel").withCard(0, 1);
c0_Scheduling = Abstract("c0_Scheduling");
c0_Filetering = c0_Scheduling.addChild("c0_Filetering").withCard(0, 1);
c0_algorithm = c0_Scheduling.addChild("c0_algorithm").withCard(1, 1);
c0_Window = c0_Scheduling.addChild("c0_Window").withCard(1, 1).withGroupCard(1, 1);
c1_Fixed = c0_Window.addChild("c1_Fixed").withCard(0, 1);
c1_Dynamic = c0_Window.addChild("c1_Dynamic").withCard(0, 1);
c0_TimeResolution = c0_Scheduling.addChild("c0_TimeResolution").withCard(1, 1);
c0_Scheduler = Abstract("c0_Scheduler");
c0_taskset = c0_Scheduler.addChild("c0_taskset").withCard(1);
c0_system = c0_Scheduler.addChild("c0_system").withCard(1);
c0_scheduling = c0_Scheduler.addChild("c0_scheduling").withCard(1, 1);
c0_scheduler = Clafer("c0_scheduler").withCard(1, 1);
c0_r1 = Clafer("c0_r1").withCard(1, 1);
c0_r2 = Clafer("c0_r2").withCard(1, 1);
c0_t1 = Clafer("c0_t1").withCard(1, 1);
c0_t2 = Clafer("c0_t2").withCard(1, 1);
c0_t3 = Clafer("c0_t3").withCard(1, 1);
c0_Scalable.addConstraint(implies(some($this()), some(join(join(joinParent(joinParent($this())), c0_Type), c0_Active))));
c0_Hard.addConstraint(implies(some($this()), some(joinParent($this()))));
c0_which.refToUnique(c0_Resource);
c0_which.addConstraint(one([decl([r = local("r")], global(c0_Resource))], some(join(join(r, c0_Type), c0_Active))));
c0_timing.extending(c0_Timing);
c0_requirement.extending(c0_Requirement);
c0_algorithm.extending(c0_Algorithm);
c0_taskset.refToUnique(c0_Task);
c0_system.refToUnique(c0_Resource);
c0_system.addConstraint(some([decl([r = local("r")], global(c0_Resource))], some(join(join(r, c0_Type), c0_Active))));
c0_scheduling.extending(c0_Scheduling);
c0_scheduler.extending(c0_Scheduler);
c0_r1.extending(c0_Resource);
c0_r1.addConstraint(and(some(join(join($this(), c0_Type), c0_Active)), some(join(join(join($this(), c0_PowerConsumption), c0_Scalable), c0_Discrete))));
c0_r2.extending(c0_Resource);
c0_r2.addConstraint(and(some(join(join($this(), c0_Type), c0_Passive)), none(join(join($this(), c0_PowerConsumption), c0_Scalable))));
c0_t1.extending(c0_Task);
c0_t1.addConstraint(and(and(some(join(join(join($this(), c0_timing), c0_Periodicity), c0_Periodic)), some(join(join(join($this(), c0_requirement), c1_Deadline), c0_Hard))), equal(joinRef(join(join(join($this(), c0_requirement), c0_Source), c0_which)), global(c0_r1))));
c0_t2.extending(c0_Task);
c0_t2.addConstraint(and(some(join(join(join(join($this(), c0_timing), c0_Periodicity), c0_Aperiodic), c0_Sporadic)), equal(joinRef(join(join(join($this(), c0_requirement), c0_Source), c0_which)), global(c0_r1))));
c0_t3.extending(c0_Task);
c0_t3.addConstraint(equal(joinRef(join(join(join($this(), c0_requirement), c0_Source), c0_which)), union(global(c0_r1), global(c0_r2))));
Constraint(equal(joinRef(join(global(c0_scheduler), c0_taskset)), union(union(global(c0_t1), global(c0_t2)), global(c0_t3))));
Constraint(equal(joinRef(join(global(c0_scheduler), c0_system)), union(global(c0_r1), global(c0_r2))));
