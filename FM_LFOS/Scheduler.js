scope({c0_ACTIVE:3, c0_COMPOSITE:3, c0_DSB:2, c0_DSLB:2, c0_PASSIVE:3, c0_abstract_objective_criteria:6, c0_abstraction:3, c0_aperiodic:2, c0_capacity:3, c0_capacity_based:3, c0_centering:3, c0_composite:2, c0_continuous:3, c0_cooperative:2, c0_criteria:2, c0_data_dependency:2, c0_deadline:2, c0_dependency:2, c0_discrete:3, c0_earliness:3, c0_eligible_resources:6, c0_exclusive:3, c0_execution_time:2, c0_firm:2, c0_granularity:2, c0_hard:2, c0_identifier:3, c0_lateness:3, c0_makespan:3, c0_maxi:6, c0_mini:6, c0_mode:3, c0_n_tokens:2, c0_name:2, c0_objective:3, c0_objective_purpose:6, c0_periodic:2, c0_periodicity:2, c0_power_consumption:4, c0_preemptable:2, c0_priority:2, c0_purpose:2, c0_release_time:2, c0_required_resources:4, c0_requirement:2, c0_resource:3, c0_resource_identifier:2, c0_resource_related_objective:3, c0_resource_related_objective_criteria:4, c0_resource_related_user_defined_criteria:6, c0_resource_requirement:2, c0_resource_type:3, c0_scalable:3, c0_semantic_based:3, c0_sequence_dependent_setup_time:2, c0_shared:3, c0_soft:2, c0_sporadic:2, c0_system:3, c0_tardiness:3, c0_task:2, c0_task_related_objective:2, c0_task_related_user_defined_criteria:6, c0_taskset:2, c0_terminal:2, c0_throughput:4, c0_time_related_objective_criteria:3, c0_timing:2, c0_token_type:2, c0_utilization:4, c1_abstract_objective_criteria:2, c1_criteria:3, c1_deadline:2, c1_name:2, c1_objective:2, c1_power_consumption:3, c1_purpose:3, c1_requirement:2, c1_resource_related_objective_criteria:3, c1_time_related_objective_criteria:2, c1_timing:2, c2_abstract_objective_criteria:3});
defaultScope(1);
intRange(-8, 7);
stringLength(32);

c0_objective_purpose = Abstract("c0_objective_purpose").withGroupCard(1, 1);
c0_maxi = c0_objective_purpose.addChild("c0_maxi").withCard(0, 1);
c0_mini = c0_objective_purpose.addChild("c0_mini").withCard(0, 1);
c0_time_related_objective_criteria = Abstract("c0_time_related_objective_criteria").withGroupCard(1);
c0_makespan = c0_time_related_objective_criteria.addChild("c0_makespan").withCard(0, 1);
c0_tardiness = c0_time_related_objective_criteria.addChild("c0_tardiness").withCard(0, 1);
c0_earliness = c0_time_related_objective_criteria.addChild("c0_earliness").withCard(0, 1);
c0_lateness = c0_time_related_objective_criteria.addChild("c0_lateness").withCard(0, 1);
c0_centering = c0_time_related_objective_criteria.addChild("c0_centering").withCard(0, 1);
c0_resource_related_objective_criteria = Abstract("c0_resource_related_objective_criteria").withGroupCard(1);
c0_power_consumption = c0_resource_related_objective_criteria.addChild("c0_power_consumption").withCard(0, 1);
c0_utilization = c0_resource_related_objective_criteria.addChild("c0_utilization").withCard(0, 1);
c0_throughput = c0_resource_related_objective_criteria.addChild("c0_throughput").withCard(0, 1);
c0_abstract_objective_criteria = Abstract("c0_abstract_objective_criteria").withGroupCard(1);
c0_task_related_user_defined_criteria = c0_abstract_objective_criteria.addChild("c0_task_related_user_defined_criteria").withCard(0, 1);
c0_resource_related_user_defined_criteria = c0_abstract_objective_criteria.addChild("c0_resource_related_user_defined_criteria").withCard(0, 1);
c0_task_related_objective = Abstract("c0_task_related_objective");
c0_purpose = c0_task_related_objective.addChild("c0_purpose").withCard(1, 1).withGroupCard(1, 1);
c0_criteria = c0_task_related_objective.addChild("c0_criteria").withCard(1, 1).withGroupCard(1);
c1_time_related_objective_criteria = c0_criteria.addChild("c1_time_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c1_abstract_objective_criteria = c0_criteria.addChild("c1_abstract_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_resource_related_objective = Abstract("c0_resource_related_objective");
c1_purpose = c0_resource_related_objective.addChild("c1_purpose").withCard(1, 1).withGroupCard(1, 1);
c1_criteria = c0_resource_related_objective.addChild("c1_criteria").withCard(1, 1).withGroupCard(1);
c1_resource_related_objective_criteria = c1_criteria.addChild("c1_resource_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c2_abstract_objective_criteria = c1_criteria.addChild("c2_abstract_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_global_objective = Abstract("c0_global_objective");
c2_purpose = c0_global_objective.addChild("c2_purpose").withCard(1, 1).withGroupCard(1, 1);
c2_criteria = c0_global_objective.addChild("c2_criteria").withCard(1, 1).withGroupCard(1);
c2_time_related_objective_criteria = c2_criteria.addChild("c2_time_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c2_resource_related_objective_criteria = c2_criteria.addChild("c2_resource_related_objective_criteria").withCard(0, 1).withGroupCard(1);
c3_abstract_objective_criteria = c2_criteria.addChild("c3_abstract_objective_criteria").withCard(0, 1).withGroupCard(1);
c0_resource = Abstract("c0_resource");
c0_capacity = c0_resource.addChild("c0_capacity").withCard(1, 1);
c0_resource_type = c0_resource.addChild("c0_resource_type").withCard(1, 1);
c0_abstraction = c0_resource_type.addChild("c0_abstraction").withCard(1, 1).withGroupCard(1, 1);
c0_ACTIVE = c0_abstraction.addChild("c0_ACTIVE").withCard(0, 1);
c0_PASSIVE = c0_abstraction.addChild("c0_PASSIVE").withCard(0, 1);
c0_COMPOSITE = c0_abstraction.addChild("c0_COMPOSITE").withCard(0, 1);
c0_identifier = c0_resource_type.addChild("c0_identifier").withCard(1, 1);
c0_mode = c0_resource.addChild("c0_mode").withCard(1, 1).withGroupCard(1, 1);
c0_shared = c0_mode.addChild("c0_shared").withCard(0, 1);
c0_exclusive = c0_mode.addChild("c0_exclusive").withCard(0, 1).withGroupCard(1);
c0_capacity_based = c0_exclusive.addChild("c0_capacity_based").withCard(0, 1);
c0_semantic_based = c0_exclusive.addChild("c0_semantic_based").withCard(0, 1);
c1_power_consumption = c0_resource.addChild("c1_power_consumption").withCard(1, 1);
c0_scalable = c1_power_consumption.addChild("c0_scalable").withCard(0, 1).withGroupCard(1, 1);
c0_discrete = c0_scalable.addChild("c0_discrete").withCard(0, 1);
c0_continuous = c0_scalable.addChild("c0_continuous").withCard(0, 1);
c0_objective = c0_resource.addChild("c0_objective").withCard(0, 1);
c0_timing = Abstract("c0_timing");
c0_release_time = c0_timing.addChild("c0_release_time").withCard(1, 1);
c0_execution_time = c0_timing.addChild("c0_execution_time").withCard(1, 1);
c0_deadline = c0_timing.addChild("c0_deadline").withCard(1, 1);
c0_periodicity = c0_timing.addChild("c0_periodicity").withCard(1, 1).withGroupCard(1, 1);
c0_periodic = c0_periodicity.addChild("c0_periodic").withCard(0, 1);
c0_aperiodic = c0_periodicity.addChild("c0_aperiodic").withCard(0, 1);
c0_sporadic = c0_aperiodic.addChild("c0_sporadic").withCard(0, 1);
c0_resource_requirement = Abstract("c0_resource_requirement");
c0_eligible_resources = c0_resource_requirement.addChild("c0_eligible_resources").withCard(1);
c0_resource_identifier = c0_resource_requirement.addChild("c0_resource_identifier").withCard(1, 1);
c0_requirement = Abstract("c0_requirement");
c1_deadline = c0_requirement.addChild("c1_deadline").withCard(1, 1).withGroupCard(1, 1);
c0_hard = c1_deadline.addChild("c0_hard").withCard(0, 1);
c0_soft = c1_deadline.addChild("c0_soft").withCard(0, 1);
c0_firm = c1_deadline.addChild("c0_firm").withCard(0, 1);
c0_required_resources = c0_requirement.addChild("c0_required_resources").withCard(1);
c0_data_dependency = Abstract("c0_data_dependency");
c0_token_type = c0_data_dependency.addChild("c0_token_type").withCard(1, 1);
c0_n_tokens = c0_data_dependency.addChild("c0_n_tokens").withCard(1, 1);
c0_sequence_dependent_setup_time = c0_data_dependency.addChild("c0_sequence_dependent_setup_time").withCard(1, 1);
c0_task = Abstract("c0_task");
c1_timing = c0_task.addChild("c1_timing").withCard(1, 1);
c0_priority = c0_task.addChild("c0_priority").withCard(1, 1);
c0_preemptable = c0_task.addChild("c0_preemptable").withCard(0, 1);
c0_cooperative = c0_preemptable.addChild("c0_cooperative").withCard(0, 1);
c1_requirement = c0_task.addChild("c1_requirement").withCard(1, 1);
c0_granularity = c0_task.addChild("c0_granularity").withCard(1, 1).withGroupCard(1, 1);
c0_terminal = c0_granularity.addChild("c0_terminal").withCard(0, 1);
c0_composite = c0_granularity.addChild("c0_composite").withCard(0, 1);
c1_objective = c0_task.addChild("c1_objective").withCard(0, 1);
c0_dependency = c0_task.addChild("c0_dependency");
c0_scheduling_policy = Abstract("c0_scheduling_policy");
c0_grouping = c0_scheduling_policy.addChild("c0_grouping").withCard(0, 1);
c0_ranking = c0_scheduling_policy.addChild("c0_ranking").withCard(1, 1).withGroupCard(1, 1);
c0_default = c0_ranking.addChild("c0_default").withCard(0, 1).withGroupCard(1, 1);
c0_ERT = c0_default.addChild("c0_ERT").withCard(0, 1);
c0_ED = c0_default.addChild("c0_ED").withCard(0, 1);
c0_RM = c0_default.addChild("c0_RM").withCard(0, 1);
c0_SJF = c0_default.addChild("c0_SJF").withCard(0, 1);
c0_FIFO = c0_default.addChild("c0_FIFO").withCard(0, 1);
c0_user_defined = c0_ranking.addChild("c0_user_defined").withCard(0, 1);
c0_scheduling_characteristic = Abstract("c0_scheduling_characteristic");
c0_scheduling_characteristic_type = c0_scheduling_characteristic.addChild("c0_scheduling_characteristic_type").withCard(1, 1).withGroupCard(1, 1);
c0_online = c0_scheduling_characteristic_type.addChild("c0_online").withCard(0, 1);
c0_offline = c0_scheduling_characteristic_type.addChild("c0_offline").withCard(0, 1);
c0_preemptive = c0_scheduling_characteristic.addChild("c0_preemptive").withCard(0, 1);
c0_migration = c0_scheduling_characteristic.addChild("c0_migration").withCard(0, 1).withGroupCard(1, 1);
c0_task_level = c0_migration.addChild("c0_task_level").withCard(0, 1);
c0_job_level = c0_migration.addChild("c0_job_level").withCard(0, 1);
c0_policy = c0_scheduling_characteristic.addChild("c0_policy").withCard(1, 1);
c0_time_resolution = c0_scheduling_characteristic.addChild("c0_time_resolution").withCard(1, 1);
c0_priority_assignment = c0_scheduling_characteristic.addChild("c0_priority_assignment").withCard(1, 1).withGroupCard(1, 1);
c0_fixed = c0_priority_assignment.addChild("c0_fixed").withCard(0, 1);
c0_dynamic = c0_priority_assignment.addChild("c0_dynamic").withCard(0, 1);
c0_scheduling_window = c0_scheduling_characteristic.addChild("c0_scheduling_window").withCard(1, 1);
c2_objective = c0_scheduling_characteristic.addChild("c2_objective").withCard(1);
c0_solver = Abstract("c0_solver").withGroupCard(1);
c0_IBM_ILOG_CPLEX_Optimizer = c0_solver.addChild("c0_IBM_ILOG_CPLEX_Optimizer").withCard(0, 1);
c0_SCIP_SoPlex = c0_solver.addChild("c0_SCIP_SoPlex").withCard(0, 1);
c0_Knapsack = c0_solver.addChild("c0_Knapsack").withCard(0, 1);
c0_SAS_OR_R = c0_solver.addChild("c0_SAS_OR_R").withCard(0, 1);
c0_DSLB = Abstract("c0_DSLB");
c0_name = c0_DSLB.addChild("c0_name").withCard(1, 1);
c0_DSB = Abstract("c0_DSB");
c1_name = c0_DSB.addChild("c1_name").withCard(1, 1);
c0_input = Abstract("c0_input").withGroupCard(1);
c1_DSLB = c0_input.addChild("c1_DSLB").withCard(0, 1);
c1_DSB = c0_input.addChild("c1_DSB").withCard(0, 1);
c0_output = Abstract("c0_output").withGroupCard(1);
c2_DSLB = c0_output.addChild("c2_DSLB").withCard(0, 1);
c2_DSB = c0_output.addChild("c2_DSB").withCard(0, 1);
c0_scheduling_strategy = Abstract("c0_scheduling_strategy");
c1_solver = c0_scheduling_strategy.addChild("c1_solver").withCard(1, 1).withGroupCard(1);
c0_solver_meta_knowledge = c0_scheduling_strategy.addChild("c0_solver_meta_knowledge").withCard(1, 1);
c1_input = c0_scheduling_strategy.addChild("c1_input").withCard(1, 1).withGroupCard(1);
c1_output = c0_scheduling_strategy.addChild("c1_output").withCard(1, 1).withGroupCard(1);
c0_scheduler = Abstract("c0_scheduler");
c0_taskset = c0_scheduler.addChild("c0_taskset").withCard(1);
c0_system = c0_scheduler.addChild("c0_system").withCard(1);
c0_properties = c0_scheduler.addChild("c0_properties").withCard(1, 1);
c0_strategy = c0_scheduler.addChild("c0_strategy").withCard(1, 1);
c0_cpu1 = Clafer("c0_cpu1").withCard(1, 1);
c0_cpu2 = Clafer("c0_cpu2").withCard(1, 1);
c0_CPUs = Clafer("c0_CPUs").withCard(1, 1);
c0_t1 = Clafer("c0_t1").withCard(1, 1);
c0_req1 = Clafer("c0_req1").withCard(1, 1);
c0_t2 = Clafer("c0_t2").withCard(1, 1);
c0_req2 = Clafer("c0_req2").withCard(1, 1);
c0_objective_gl = Clafer("c0_objective_gl").withCard(1, 1);
c0_sched = Clafer("c0_sched").withCard(1, 1);
c0_purpose.extending(c0_objective_purpose);
c1_time_related_objective_criteria.extending(c0_time_related_objective_criteria);
c1_abstract_objective_criteria.extending(c0_abstract_objective_criteria);
c1_abstract_objective_criteria.addConstraint(and(some(join($this(), c0_task_related_user_defined_criteria)), none(join($this(), c0_resource_related_user_defined_criteria))));
c1_purpose.extending(c0_objective_purpose);
c1_resource_related_objective_criteria.extending(c0_resource_related_objective_criteria);
c2_abstract_objective_criteria.extending(c0_abstract_objective_criteria);
c2_abstract_objective_criteria.addConstraint(and(none(join($this(), c0_task_related_user_defined_criteria)), some(join($this(), c0_resource_related_user_defined_criteria))));
c2_purpose.extending(c0_objective_purpose);
c2_time_related_objective_criteria.extending(c0_time_related_objective_criteria);
c2_resource_related_objective_criteria.extending(c0_resource_related_objective_criteria);
c3_abstract_objective_criteria.extending(c0_abstract_objective_criteria);
c1_power_consumption.addConstraint(implies(some(join($this(), c0_scalable)), some(join(join(join(joinParent($this()), c0_resource_type), c0_abstraction), c0_ACTIVE))));
c0_objective.extending(c0_resource_related_objective);
c0_eligible_resources.refToUnique(c0_resource);
c0_required_resources.refToUnique(c0_resource_requirement);
c0_requirement.addConstraint(none([decl([res = local("res")], join(joinRef(join($this(), c0_required_resources)), c0_eligible_resources))], some(join(join(join(joinRef(res), c0_resource_type), c0_abstraction), c0_COMPOSITE))));
c1_timing.extending(c0_timing);
c1_requirement.extending(c0_requirement);
c1_objective.extending(c0_task_related_objective);
c0_dependency.extending(c0_data_dependency);
c0_policy.extending(c0_scheduling_policy);
c2_objective.refToUnique(c0_global_objective);
c0_name.refTo(string);
c0_DSLB.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"Domain-Specific Language Based\"")));
c1_name.refTo(string);
c0_DSB.addConstraint(equal(joinRef(join($this(), c1_name)), constant("\"Domain Structure Based\"")));
c1_DSLB.extending(c0_DSLB);
c1_DSB.extending(c0_DSB);
c2_DSLB.extending(c0_DSLB);
c2_DSB.extending(c0_DSB);
c1_solver.extending(c0_solver);
c1_input.extending(c0_input);
c1_output.extending(c0_output);
c0_taskset.refToUnique(c0_task);
c0_system.refToUnique(c0_resource);
c0_properties.extending(c0_scheduling_characteristic);
c0_strategy.extending(c0_scheduling_strategy);
c0_cpu1.extending(c0_resource);
Constraint(and(and(and(some(join(join(global(c0_cpu1), c1_power_consumption), c0_scalable)), some(join(join(join(global(c0_cpu1), c0_mode), c0_exclusive), c0_capacity_based))), some(join(join(join(join(global(c0_cpu1), c0_objective), c1_criteria), c1_resource_related_objective_criteria), c0_power_consumption))), some(join(join(join(global(c0_cpu1), c0_objective), c1_purpose), c0_mini))));
Constraint(some(join(join(join(global(c0_cpu1), c0_resource_type), c0_abstraction), c0_ACTIVE)));
c0_cpu2.extending(c0_resource);
Constraint(and(and(and(some(join(join(global(c0_cpu2), c1_power_consumption), c0_scalable)), some(join(join(join(global(c0_cpu2), c0_mode), c0_exclusive), c0_capacity_based))), some(join(join(join(join(global(c0_cpu2), c0_objective), c1_criteria), c1_resource_related_objective_criteria), c0_utilization))), some(join(join(join(global(c0_cpu2), c0_objective), c1_purpose), c0_maxi))));
Constraint(some(join(join(join(global(c0_cpu2), c0_resource_type), c0_abstraction), c0_ACTIVE)));
c0_CPUs.extending(c0_resource);
Constraint(and(and(none(join(join(global(c0_CPUs), c1_power_consumption), c0_scalable)), some(join(join(join(global(c0_CPUs), c0_mode), c0_exclusive), c0_capacity_based))), some(join(join(join(global(c0_CPUs), c0_resource_type), c0_abstraction), c0_COMPOSITE))));
c0_t1.extending(c0_task);
c0_req1.extending(c0_resource_requirement);
Constraint(equal(joinRef(join(global(c0_req1), c0_eligible_resources)), global(c0_cpu1)));
Constraint(and(and(and(and(equal(joinRef(join(join(global(c0_t1), c1_requirement), c0_required_resources)), global(c0_req1)), none(join(global(c0_t1), c1_objective))), some(join(join(join(global(c0_t1), c1_timing), c0_periodicity), c0_periodic))), some(join(join(global(c0_t1), c0_granularity), c0_terminal))), none(join(global(c0_t1), c0_preemptable))));
c0_t2.extending(c0_task);
c0_req2.extending(c0_resource_requirement);
Constraint(equal(joinRef(join(global(c0_req2), c0_eligible_resources)), global(c0_cpu2)));
Constraint(and(and(and(and(equal(joinRef(join(join(global(c0_t2), c1_requirement), c0_required_resources)), global(c0_req2)), none(join(global(c0_t2), c1_objective))), some(join(join(join(global(c0_t2), c1_timing), c0_periodicity), c0_aperiodic))), some(join(join(global(c0_t2), c0_granularity), c0_terminal))), some(join(global(c0_t2), c0_preemptable))));
c0_objective_gl.extending(c0_global_objective);
Constraint(some(join(join(join(global(c0_objective_gl), c2_criteria), c2_time_related_objective_criteria), c0_tardiness)));
c0_sched.extending(c0_scheduler);
Constraint(equal(joinRef(join(global(c0_sched), c0_taskset)), union(global(c0_t1), global(c0_t2))));
Constraint(equal(joinRef(join(global(c0_sched), c0_system)), union(union(global(c0_CPUs), global(c0_cpu1)), global(c0_cpu2))));
Constraint(equal(joinRef(join(join(global(c0_sched), c0_properties), c2_objective)), global(c0_objective_gl)));
Constraint(and(and(and(and(some(join(join(join(global(c0_sched), c0_strategy), c1_solver), c0_IBM_ILOG_CPLEX_Optimizer)), some(join(join(join(global(c0_sched), c0_strategy), c1_input), c1_DSLB))), some(join(join(join(global(c0_sched), c0_strategy), c1_input), c1_DSB))), some(join(join(join(global(c0_sched), c0_strategy), c1_output), c2_DSLB))), some(join(join(join(global(c0_sched), c0_strategy), c1_output), c2_DSB))));
