/**
 */
package Connection.impl;

import Connection.ActiveResourceRequirement;
import Connection.Edge;
import Connection.FinalProcess;
import Connection.ForkProcess;
import Connection.InitialProcess;
import Connection.JoinProcess;
import Connection.PassiveResourceRequirement;
import Connection.ProcessDiagram;
import Connection.ProcessFactory;
import Connection.ProcessPackage;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ProcessFactoryImpl extends EFactoryImpl implements ProcessFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static ProcessFactory init() {
		try {
			ProcessFactory theProcessFactory = (ProcessFactory)EPackage.Registry.INSTANCE.getEFactory(ProcessPackage.eNS_URI);
			if (theProcessFactory != null) {
				return theProcessFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new ProcessFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProcessFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case ProcessPackage.INITIAL_PROCESS: return createInitialProcess();
			case ProcessPackage.FINAL_PROCESS: return createFinalProcess();
			case ProcessPackage.ACTIVE_RESOURCE_REQUIREMENT: return createActiveResourceRequirement();
			case ProcessPackage.PASSIVE_RESOURCE_REQUIREMENT: return createPassiveResourceRequirement();
			case ProcessPackage.PROCESS: return createProcess();
			case ProcessPackage.FORK_PROCESS: return createForkProcess();
			case ProcessPackage.JOIN_PROCESS: return createJoinProcess();
			case ProcessPackage.EDGE: return createEdge();
			case ProcessPackage.PROCESS_DIAGRAM: return createProcessDiagram();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InitialProcess createInitialProcess() {
		InitialProcessImpl initialProcess = new InitialProcessImpl();
		return initialProcess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FinalProcess createFinalProcess() {
		FinalProcessImpl finalProcess = new FinalProcessImpl();
		return finalProcess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActiveResourceRequirement createActiveResourceRequirement() {
		ActiveResourceRequirementImpl activeResourceRequirement = new ActiveResourceRequirementImpl();
		return activeResourceRequirement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PassiveResourceRequirement createPassiveResourceRequirement() {
		PassiveResourceRequirementImpl passiveResourceRequirement = new PassiveResourceRequirementImpl();
		return passiveResourceRequirement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Connection.Process createProcess() {
		ProcessImpl process = new ProcessImpl();
		return process;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ForkProcess createForkProcess() {
		ForkProcessImpl forkProcess = new ForkProcessImpl();
		return forkProcess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JoinProcess createJoinProcess() {
		JoinProcessImpl joinProcess = new JoinProcessImpl();
		return joinProcess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Edge createEdge() {
		EdgeImpl edge = new EdgeImpl();
		return edge;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProcessDiagram createProcessDiagram() {
		ProcessDiagramImpl processDiagram = new ProcessDiagramImpl();
		return processDiagram;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProcessPackage getProcessPackage() {
		return (ProcessPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static ProcessPackage getPackage() {
		return ProcessPackage.eINSTANCE;
	}

} //ProcessFactoryImpl
